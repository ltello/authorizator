require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
shared_context "users controller" do

  describe UsersController do

    context "show admin users info. For CRUD operations on users, activate devise :registerable in User model:" do

      it 'Allows info REST actions only: index and show' do
        expect(controller).to be_a_kind_of(UsersController)
        expect(controller).to     respond_to(:index, :show)
        expect(controller).not_to respond_to(:new, :create, :edit, :update, :destroy)
      end

      context "GET index" do
        it "forces the user to be logged in and" do
          get :index, {}, self.class::VALID_SESSION
          expect(response).to redirect_to(new_user_session_path)
        end

        it "renders the index view with all the registered users." do
          user = log_user_in
          get :index
          expect(assigns(:users)).to eq([user])
          expect(response).to render_template("index")
        end
      end

      context "GET show" do
        it "forces the user to be logged in and" do
          get :show, {:id => '1'}, self.class::VALID_SESSION
          expect(response).to redirect_to(new_user_session_path)
        end

        it "renders the show view with the requested user." do
          user = log_user_in
          get :show, {:id => user.to_param}
          expect(assigns(:user)).to eq(user)
          expect(response).to render_template("show")
        end
      end

    end

  end

end
